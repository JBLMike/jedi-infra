apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "logstash.fullname" . }}
  labels:
    {{- include "logstash.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "logstash.selectorLabels" . | nindent 6 }}
  strategy:
    type: {{ .Values.strategy }}
  template:
    metadata:
      annotations:
        checksum/pipeline: {{ include (print $.Template.BasePath "/pipeline.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "logstash.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "logstash.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args: ['/bin/sh', '-c', 'echo "$LOGSTASH_PLUGINS" | xargs -r logstash-plugin install && exec logstash']
          ports:
            - name: http
              containerPort: 9600
              protocol: TCP
            - name: beats
              containerPort: 5044
              protocol: TCP
          {{- if .Values.env }}
          envFrom:
            - secretRef:
                name: {{ include "logstash.fullname" . }}-env
          {{- end }}
          startupProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 10
            failureThreshold: 30
            tcpSocket:
              port: http
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 10
            tcpSocket:
              port: http
          readinessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 10
            httpGet:
              path: /
              port: http
              scheme: HTTP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /usr/share/logstash/pipeline
              name: pipeline
              readOnly: true
            {{- if .Values.secret }}
            - mountPath: /usr/share/logstash/secret
              name: secret
              readOnly: true
            {{- end }}
            {{- with .Values.volumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: pipeline
          secret:
            secretName: {{ include "logstash.fullname" . }}-pipeline
        {{- if .Values.secret }}
        - name: secret
          secret:
            secretName: {{ include "logstash.fullname" . }}-secret
        {{- end }}
        {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
